# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо
# только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не
# остановит работу скрипта, введя, например, команду «stop». При этом скрипт завершается,
# сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю
# ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class Error:
    def __init__(self, *args):
        self.my_list = []

    def spis_1(self):
        while True:
            try:
                val = int(input("Введите элемент списка (только числа): "))
                self.my_list.append(val)
                print(f"Наполнение списка на текущий момент: {self.my_list} ")
            except:
                print(f"Недопустимое значение - допустимо вводить только числа!")
                yes_no = input(f""
                               f"Ещё? (Y/N): ")

                if yes_no == 'Y' or yes_no == 'y':
                    print(try_except.spis_1())
                elif yes_no == 'N' or yes_no == 'n':
                    return f"Формирование списка закончено."
                else:
                    return f"Программа завершена."


try_except = Error(1)
print(try_except.spis_1())
